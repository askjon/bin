#!/bin/bash 
# jon 2020
# bin/g2d

# the folder structure should already be mounted 

# Needs some cleanup
#set -eu
set -e

target=$1

if [ -z $1 ]
then
	2>&1 echo "$0: No target!"
	exit 1
fi

if [ ! -z $2 ]
then
	bin_import=$2
else
	bin_import=pkg
fi

echo "[$0] gen 2 2 disk @ $target "

echo "[$0] Enter the settings directory (dsk|srv)"
read settings

if [ -z $settings ]
then
	settings=dsk
fi

uset=sets/$settings

echo "[$0] using settings directory $uset"

if [ ! -d $uset ]
then
	2>&1 echo "$0: Could not find $uset"
	exit 1
fi

if [ ! -e $uset/stages/stage3*.tar.xz ]
then
	echo "$0: Can\'t find stage3 tarball, now downloading"
	./dl-stage.sh $uset/stages/ || exit 1
	rm $uset/stages/.dirty
fi

if [ -e $uset/stages/.dirty ]
then
	echo "[WARNING] Dirty flag found ! Might be insecure tarball"
	echo "[$0] Redownload? Proceed? r|y|[n]"
	read response

	if [ -z $response ]
	then 
		response=n
	fi

	if [ ! $response = "y" ]
	then 
		if [ $response = "r" ]
		then
			echo "[WARNING] Redownloading the tarball"
			./dl-stage.sh $uset/stages/ || exit 1
			rm $uset/stages/.dirty
		else
			echo "[ERROR] Dirty flag can not be ignored!"
			exit 1
		fi
	fi
fi

echo "[$0] Should we import binary pkgs? [y]|n"
read response

if [ -z $response || $RESPONSE = "y" ]
then
	echo "[$0] Importing from? [$bin_import]"
	read response
	if [ ! -z $response ]
	then
		bin_import=$response
	fi
	./import-bin.sh $target $bin_import
fi

echo "[$0] EXTRACTING BASE SYSTEM"

tar xpvf $uset/stages/stage3*.tar.* --xattrs-include='*.*' --numeric-owner -C $target
 
echo "[$0] COPYING INSTALLER FILES TO DISK"

if [ -e $uset/chroot.sh ]
then
	cp $uset/chroot.sh $target
else
	cp chroot.sh $target
fi

cp $uset/pkg.lst $target

mkdir $target/root

if [ -e $uset/root ]
	then
	cp -rf $uset/root/* $target/root
fi


echo "[$0] Setting clock "

# Adjust System Clock [leaks ip]
ntpd -q -g

# Copying portage net info
mkdir -p $target/etc/portage/repos.conf
cp $target/usr/share/portage/config/repos.conf $target/etc/portage/repos.conf/gentoo.conf

./gen-fstab.sh $target
cat fstab.gen >> $target/etc/fstab

echo "[$0] CHROOTING"

cp --dereference /etc/resolv.conf $target/etc/resolv.conf

mount --types proc /proc $target/proc
mount --rbind /sys $target/sys
mount --make-rslave $target/sys
mount --rbind /dev $target/dev
mount --make-rslave $target/dev 

chroot $target /chroot.sh

echo "[$0] EXITING CHROOT"

echo "[$0] You want to unmount? [y]|n"

read response
if [ -z $response ]
then
	umount -l $target/dev{/shm,/pts,}
	umount -R $target{/proc,/sys}
fi
